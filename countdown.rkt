;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname countdown) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #t)))
;;*************************************************
;;Wen Hui Zhang 20825781
;;CS 135 - Fall 2019
;;Assignment 10 - Problem 2
;;*************************************************

;; An Operator (Op) is (anyof '+ '- '* '/)
;; A Binary Expression Tree (BET) is one of:
;; * Nat
;; * (list Op BET BET)

;;part i of a)
;; (swap i j lst) produces lst with the elements at positions
;;     i and j swapped
;; swap: Nat Nat (listof X) -> (listof X)
;;     requires: i, j < (length lst)
(check-expect (swap 0 3 '(0 1 2 3 4 5)) '(3 1 2 0 4 5))
(check-expect (swap 1 2 '(a b c d)) '(a c b d))

(define (swap i j lst)
  (local [(define (swap/help i j lst i-val j-val)
  (cond [(empty? lst) empty]
        [(= i 0) (cons j-val (swap/help (sub1 i) (sub1 j) (rest lst) i-val j-val))]
        [(= j 0) (cons i-val (swap/help (sub1 i) (sub1 j) (rest lst) i-val j-val))]
        [else (cons (first lst) (swap/help (sub1 i) (sub1 j) (rest lst) i-val j-val))]))]
  (swap/help i j lst (list-ref lst i) (list-ref lst j))))

;;Tests:
(check-expect (swap 2 5 '(1 2 3 4 5 6)) '(1 2 6 4 5 3))
(check-expect (swap 0 1 '(1 2 3)) '(2 1 3))
(check-expect (swap 0 0 '(1 2 3)) '(1 2 3))
(check-expect (swap 2 1 '(1 2 3)) '(1 3 2))

;;part ii
;;(generate-permutations lst) produces all
;;   possible permutations of lst.
;;generate-permutations: (listof X) -> (listof (listof X))
(check-expect (generate-permutations '(2 4 8))
'((2 4 8) (2 8 4) (4 2 8) (4 8 2) (8 2 4) (8 4 2)))
(check-expect (generate-permutations '(true false))
'((true false) (false true)))

(define (generate-permutations lst)
  (cond [(empty? lst) (list empty)]
        [(empty? (first lst)) (list (list empty))]
        [(= (length lst) 1) (list lst)]
        [(= (length lst) 2) (list lst (reverse lst))]
        [else
         (foldr append empty
                (map (lambda (x)
                       (map (lambda (a) (cons x a))
                            (generate-permutations (remove x lst)))) lst))]))

;;Tests:
(check-expect (generate-permutations '(1 2)) '((1 2) (2 1)))
(check-expect (generate-permutations '(1)) '((1)))
(check-expect (generate-permutations '(1 1)) '((1 1) (1 1)))
(check-expect (generate-permutations empty) (list empty))
(check-expect (generate-permutations '(1)) '((1)))
(check-expect (length (generate-permutations '(1 2 3 4 5))) 120)
(check-expect (generate-permutations (list 1 "test"))
              (list (list 1 "test") (list "test" 1)))
(check-expect (generate-permutations '(())) '((())))
(check-expect (generate-permutations '(a b c d)) (list (list 'a 'b 'c 'd)
                                                       (list 'a 'b 'd 'c)
                                                       (list 'a 'c 'b 'd)
                                                       (list 'a 'c 'd 'b)
                                                       (list 'a 'd 'b 'c)
                                                       (list 'a 'd 'c 'b)
                                                       (list 'b 'a 'c 'd)
                                                       (list 'b 'a 'd 'c)
                                                       (list 'b 'c 'a 'd)
                                                       (list 'b 'c 'd 'a)
                                                       (list 'b 'd 'a 'c)
                                                       (list 'b 'd 'c 'a)
                                                       (list 'c 'a 'b 'd)
                                                       (list 'c 'a 'd 'b)
                                                       (list 'c 'b 'a 'd)
                                                       (list 'c 'b 'd 'a)
                                                       (list 'c 'd 'a 'b)
                                                       (list 'c 'd 'b 'a)
                                                       (list 'd 'a 'b 'c)
                                                       (list 'd 'a 'c 'b)
                                                       (list 'd 'b 'a 'c)
                                                       (list 'd 'b 'c 'a)
                                                       (list 'd 'c 'a 'b)
                                                       (list 'd 'c 'b 'a)))
(check-expect (generate-permutations '(1 2 3 4 5)) (list (list 1 2 3 4 5)
                                                         (list 1 2 3 5 4)
                                                         (list 1 2 4 3 5)
                                                         (list 1 2 4 5 3)
                                                         (list 1 2 5 3 4)
                                                         (list 1 2 5 4 3)
                                                         (list 1 3 2 4 5)
                                                         (list 1 3 2 5 4)
                                                         (list 1 3 4 2 5)
                                                         (list 1 3 4 5 2)
                                                         (list 1 3 5 2 4)
                                                         (list 1 3 5 4 2)
                                                         (list 1 4 2 3 5)
                                                         (list 1 4 2 5 3)
                                                         (list 1 4 3 2 5)
                                                         (list 1 4 3 5 2)
                                                         (list 1 4 5 2 3)
                                                         (list 1 4 5 3 2)
                                                         (list 1 5 2 3 4)
                                                         (list 1 5 2 4 3)
                                                         (list 1 5 3 2 4)
                                                         (list 1 5 3 4 2)
                                                         (list 1 5 4 2 3)
                                                         (list 1 5 4 3 2)
                                                         (list 2 1 3 4 5)
                                                         (list 2 1 3 5 4)
                                                         (list 2 1 4 3 5)
                                                         (list 2 1 4 5 3)
                                                         (list 2 1 5 3 4)
                                                         (list 2 1 5 4 3)
                                                         (list 2 3 1 4 5)
                                                         (list 2 3 1 5 4)
                                                         (list 2 3 4 1 5)
                                                         (list 2 3 4 5 1)
                                                         (list 2 3 5 1 4)
                                                         (list 2 3 5 4 1)
                                                         (list 2 4 1 3 5)
                                                         (list 2 4 1 5 3)
                                                         (list 2 4 3 1 5)
                                                         (list 2 4 3 5 1)
                                                         (list 2 4 5 1 3)
                                                         (list 2 4 5 3 1)
                                                         (list 2 5 1 3 4)
                                                         (list 2 5 1 4 3)
                                                         (list 2 5 3 1 4)
                                                         (list 2 5 3 4 1)
                                                         (list 2 5 4 1 3)
                                                         (list 2 5 4 3 1)
                                                         (list 3 1 2 4 5)
                                                         (list 3 1 2 5 4)
                                                         (list 3 1 4 2 5)
                                                         (list 3 1 4 5 2)
                                                         (list 3 1 5 2 4)
                                                         (list 3 1 5 4 2)
                                                         (list 3 2 1 4 5)
                                                         (list 3 2 1 5 4)
                                                         (list 3 2 4 1 5)
                                                         (list 3 2 4 5 1)
                                                         (list 3 2 5 1 4)
                                                         (list 3 2 5 4 1)
                                                         (list 3 4 1 2 5)
                                                         (list 3 4 1 5 2)
                                                         (list 3 4 2 1 5)
                                                         (list 3 4 2 5 1)
                                                         (list 3 4 5 1 2)
                                                         (list 3 4 5 2 1)
                                                         (list 3 5 1 2 4)
                                                         (list 3 5 1 4 2)
                                                         (list 3 5 2 1 4)
                                                         (list 3 5 2 4 1)
                                                         (list 3 5 4 1 2)
                                                         (list 3 5 4 2 1)
                                                         (list 4 1 2 3 5)
                                                         (list 4 1 2 5 3)
                                                         (list 4 1 3 2 5)
                                                         (list 4 1 3 5 2)
                                                         (list 4 1 5 2 3)
                                                         (list 4 1 5 3 2)
                                                         (list 4 2 1 3 5)
                                                         (list 4 2 1 5 3)
                                                         (list 4 2 3 1 5)
                                                         (list 4 2 3 5 1)
                                                         (list 4 2 5 1 3)
                                                         (list 4 2 5 3 1)
                                                         (list 4 3 1 2 5)
                                                         (list 4 3 1 5 2)
                                                         (list 4 3 2 1 5)
                                                         (list 4 3 2 5 1)
                                                         (list 4 3 5 1 2)
                                                         (list 4 3 5 2 1)
                                                         (list 4 5 1 2 3)
                                                         (list 4 5 1 3 2)
                                                         (list 4 5 2 1 3)
                                                         (list 4 5 2 3 1)
                                                         (list 4 5 3 1 2)
                                                         (list 4 5 3 2 1)
                                                         (list 5 1 2 3 4)
                                                         (list 5 1 2 4 3)
                                                         (list 5 1 3 2 4)
                                                         (list 5 1 3 4 2)
                                                         (list 5 1 4 2 3)
                                                         (list 5 1 4 3 2)
                                                         (list 5 2 1 3 4)
                                                         (list 5 2 1 4 3)
                                                         (list 5 2 3 1 4)
                                                         (list 5 2 3 4 1)
                                                         (list 5 2 4 1 3)
                                                         (list 5 2 4 3 1)
                                                         (list 5 3 1 2 4)
                                                         (list 5 3 1 4 2)
                                                         (list 5 3 2 1 4)
                                                         (list 5 3 2 4 1)
                                                         (list 5 3 4 1 2)
                                                         (list 5 3 4 2 1)
                                                         (list 5 4 1 2 3)
                                                         (list 5 4 1 3 2)
                                                         (list 5 4 2 1 3)
                                                         (list 5 4 2 3 1)
                                                         (list 5 4 3 1 2)
                                                         (list 5 4 3 2 1)))
;; part iii      
;; (generate-tuples lst n) produces all tuples of length n of
;; elements in lst.
;; generate-tuples: (listof X) Nat -> (listof (listof X))
;;Examples:
(check-expect (generate-tuples '(+ * -) 2) (list (list '+ '+) (list '+ '*) (list '+ '-)
                                                 (list '* '+) (list '* '*) (list '* '-)
                                                 (list '- '+) (list '- '*) (list '- '-)))
(check-expect (generate-tuples '(+ -) 0) (list empty)) 

(define (generate-tuples lst n)
  (cond [(= n 0) (list empty)]
        [(empty? lst) empty]
        [(= n 1) (cons (list (first lst)) (generate-tuples (rest lst) n))]
        [else (foldr append empty
                     (map (lambda (x)
                            (map (lambda (a) (cons x a))
                                 (generate-tuples lst (sub1 n)))) lst))]))

;;Tests:
(check-expect (generate-tuples '(+ -) 3) '((+ + +) (+ + -) (+ - +) (+ - -)
                                           (- + +) (- + -) (- - +) (- - -)))
(check-expect (generate-tuples '(+ -) 0) (list empty))
(check-expect (generate-tuples '(a b) 2) '((a a) (a b) (b a) (b b)))
(check-expect (generate-tuples empty 2) empty)
(check-expect (generate-tuples '(+ - * /) 1) '((+) (-) (*) (/)))
(check-expect (generate-tuples '(+ -) 3) '((+ + +) (+ + -) (+ - +) (+ - -)
                                           (- + +) (- + -) (- - +) (- - -)))
(check-expect (generate-tuples '(+ -) 0) (list empty))
(check-expect (generate-tuples empty 1) empty)
(check-expect (generate-tuples empty 0) (list empty))
(check-expect (generate-tuples '(+ - / *) 1) '((+) (-) (/) (*)))
(check-expect (generate-tuples '(+ - *) 4) (list (list '+ '+ '+ '+)
                                                 (list '+ '+ '+ '-)
                                                 (list '+ '+ '+ '*)
                                                 (list '+ '+ '- '+)
                                                 (list '+ '+ '- '-)
                                                 (list '+ '+ '- '*)
                                                 (list '+ '+ '* '+)
                                                 (list '+ '+ '* '-)
                                                 (list '+ '+ '* '*)
                                                 (list '+ '- '+ '+)
                                                 (list '+ '- '+ '-)
                                                 (list '+ '- '+ '*)
                                                 (list '+ '- '- '+)
                                                 (list '+ '- '- '-)
                                                 (list '+ '- '- '*)
                                                 (list '+ '- '* '+)
                                                 (list '+ '- '* '-)
                                                 (list '+ '- '* '*)
                                                 (list '+ '* '+ '+)
                                                 (list '+ '* '+ '-)
                                                 (list '+ '* '+ '*)
                                                 (list '+ '* '- '+)
                                                 (list '+ '* '- '-)
                                                 (list '+ '* '- '*)
                                                 (list '+ '* '* '+)
                                                 (list '+ '* '* '-)
                                                 (list '+ '* '* '*)
                                                 (list '- '+ '+ '+)
                                                 (list '- '+ '+ '-)
                                                 (list '- '+ '+ '*)
                                                 (list '- '+ '- '+)
                                                 (list '- '+ '- '-)
                                                 (list '- '+ '- '*)
                                                 (list '- '+ '* '+)
                                                 (list '- '+ '* '-)
                                                 (list '- '+ '* '*)
                                                 (list '- '- '+ '+)
                                                 (list '- '- '+ '-)
                                                 (list '- '- '+ '*)
                                                 (list '- '- '- '+)
                                                 (list '- '- '- '-)
                                                 (list '- '- '- '*)
                                                 (list '- '- '* '+)
                                                 (list '- '- '* '-)
                                                 (list '- '- '* '*)
                                                 (list '- '* '+ '+)
                                                 (list '- '* '+ '-)
                                                 (list '- '* '+ '*)
                                                 (list '- '* '- '+)
                                                 (list '- '* '- '-)
                                                 (list '- '* '- '*)
                                                 (list '- '* '* '+)
                                                 (list '- '* '* '-)
                                                 (list '- '* '* '*)
                                                 (list '* '+ '+ '+)
                                                 (list '* '+ '+ '-)
                                                 (list '* '+ '+ '*)
                                                 (list '* '+ '- '+)
                                                 (list '* '+ '- '-)
                                                 (list '* '+ '- '*)
                                                 (list '* '+ '* '+)
                                                 (list '* '+ '* '-)
                                                 (list '* '+ '* '*)
                                                 (list '* '- '+ '+)
                                                 (list '* '- '+ '-)
                                                 (list '* '- '+ '*)
                                                 (list '* '- '- '+)
                                                 (list '* '- '- '-)
                                                 (list '* '- '- '*)
                                                 (list '* '- '* '+)
                                                 (list '* '- '* '-)
                                                 (list '* '- '* '*)
                                                 (list '* '* '+ '+)
                                                 (list '* '* '+ '-)
                                                 (list '* '* '+ '*)
                                                 (list '* '* '- '+)
                                                 (list '* '* '- '-)
                                                 (list '* '* '- '*)
                                                 (list '* '* '* '+)
                                                 (list '* '* '* '-)
                                                 (list '* '* '* '*)))

;;part iv
;;cross: consumes two lists lst1 and lst2 and produces every pair permutation
;;    of elements in lst1 and lst2
;;cross: (listof Any) (listof Any) -> (listof (list Any Any))
;;Examples:
(check-expect (cross '(1 2) '(a b)) '((1 a) (1 b) (2 a) (2 b)))
(check-expect (cross '(a b c) '(1 2)) '((a 1) (a 2) (b 1) (b 2) (c 1) (c 2)))
(check-expect (cross empty '(1 3)) empty)
             
(define (cross lst1 lst2)
  (foldr (lambda (c1 result)
           (append (map (lambda (c2)
                          (list c1 c2))
                        lst2)
                   result))
         empty lst1))

;;(create-bets nlon nloop) produces a list of all possible BET
;;    based off of nlon and nloop.
;;create-bets: (listof (listof Num)) (listof (listof Op)) ->
;;    (listof BET)
;;    requires: (length nlon) - (length nloop) = 1
;;Examples:
(check-expect (create-bets '((1 2 3)) '((+ -) (- +))) (list (list '+ (list '- 1 2) 3)
                                                            (list '+ 1 (list '- 2 3))
                                                            (list '- (list '+ 1 2) 3)
                                                            (list '- 1 (list '+ 2 3))))
(check-expect (create-bets '((1 2)) '((+) (-))) (list (list '+ 1 2) (list '- 1 2)))

(define (create-bets nlon nloop)
  (local [(define (create-pairs i n)
            (cond [(= i n) empty]
                  [else (cons (list (- (sub1 n) i) i) (create-pairs (add1 i) n))]))
          (define (create-left-right-pairs n) (create-pairs 0 n))
          ;;create-tree-structure n takes a n, node count and produces all possible binary trees
          ;;    with the pairs of n
          (define (create-tree-structure n)
            (cond [(= n 0) (list empty)]
                  [else (local [(define pairs (create-left-right-pairs n))]
                          (map (lambda (a) (cons n a)) (create-trees pairs)))]))
          ;;create-trees takes a list of pairs of node-cnt and produces all subtrees of the node-cnt
          (define (create-trees pairs)
            (cond [(empty? pairs) empty]
                  [else (local [(define left (first (first pairs)))
                                (define right (second (first pairs)))]
                          (append (cross (create-tree-structure left) (create-tree-structure right))
                                  (create-trees (rest pairs))))]))
          ;;replace-vals takes a nlst, which is a binary tree, and ops, nums, list of ops and nums,
          ;;    and replaces the numbers in the nlst with the operators in ops, and the empty
          ;;    lists with numbers in nums.
          (define (replace-vals nlst ops nums i j)
            (cond [(empty? nlst) empty]
                  [(number? (first nlst)) (cons (list-ref ops j)
                                                (replace-vals (rest nlst) ops nums i (add1 j)))]
                  [(empty? (first nlst)) (cons (list-ref nums i)
                                               (replace-vals (rest nlst) ops nums (add1 i) j))]
                  [(cons? (first nlst)) (cons (replace-vals (first nlst) ops nums i j)
                                              (replace-vals (rest nlst) ops nums
                                                            (+ (add1 (first (first nlst))) i) (+ (first (first nlst)) j)))]))
          ;;create-some-bets takes a list of trees and list of operators, ops,
          ;;    and list of numbers, nums, and produces all bets from that list.
          (define (create-some-bets lst ops nums)
            (cond [(empty? lst) empty]
                  [else (cons (replace-vals (first lst) ops nums 0 0)
                              (create-some-bets (rest lst) ops nums))]))]
    (foldr append empty
           (map (lambda (x)
                  (create-some-bets (create-tree-structure (length (second x))) (second x) (first x)))
                (cross nlon nloop)))))

;;Tests:
(check-expect (create-bets '((1 2) (2 1)) (generate-tuples '(+ - / *) 1))
              (list (list '+ 1 2) (list '- 1 2)
                    (list '/ 1 2) (list '* 1 2)
                    (list '+ 2 1) (list '- 2 1)
                    (list '/ 2 1) (list '* 2 1)))
(check-expect (create-bets '((1 2 3) (3 2 1)) (generate-tuples '(+ - / *) 2))
              (list (list '+ (list '+ 1 2) 3)
                    (list '+ 1 (list '+ 2 3))
                    (list '+ (list '- 1 2) 3)
                    (list '+ 1 (list '- 2 3))
                    (list '+ (list '/ 1 2) 3)
                    (list '+ 1 (list '/ 2 3))
                    (list '+ (list '* 1 2) 3)
                    (list '+ 1 (list '* 2 3))
                    (list '- (list '+ 1 2) 3)
                    (list '- 1 (list '+ 2 3))
                    (list '- (list '- 1 2) 3)
                    (list '- 1 (list '- 2 3))
                    (list '- (list '/ 1 2) 3)
                    (list '- 1 (list '/ 2 3))
                    (list '- (list '* 1 2) 3)
                    (list '- 1 (list '* 2 3))
                    (list '/ (list '+ 1 2) 3)
                    (list '/ 1 (list '+ 2 3))
                    (list '/ (list '- 1 2) 3)
                    (list '/ 1 (list '- 2 3))
                    (list '/ (list '/ 1 2) 3)
                    (list '/ 1 (list '/ 2 3))
                    (list '/ (list '* 1 2) 3)
                    (list '/ 1 (list '* 2 3))
                    (list '* (list '+ 1 2) 3)
                    (list '* 1 (list '+ 2 3))
                    (list '* (list '- 1 2) 3)
                    (list '* 1 (list '- 2 3))
                    (list '* (list '/ 1 2) 3)
                    (list '* 1 (list '/ 2 3))
                    (list '* (list '* 1 2) 3)
                    (list '* 1 (list '* 2 3))
                    (list '+ (list '+ 3 2) 1)
                    (list '+ 3 (list '+ 2 1))
                    (list '+ (list '- 3 2) 1)
                    (list '+ 3 (list '- 2 1))
                    (list '+ (list '/ 3 2) 1)
                    (list '+ 3 (list '/ 2 1))
                    (list '+ (list '* 3 2) 1)
                    (list '+ 3 (list '* 2 1))
                    (list '- (list '+ 3 2) 1)
                    (list '- 3 (list '+ 2 1))
                    (list '- (list '- 3 2) 1)
                    (list '- 3 (list '- 2 1))
                    (list '- (list '/ 3 2) 1)
                    (list '- 3 (list '/ 2 1))
                    (list '- (list '* 3 2) 1)
                    (list '- 3 (list '* 2 1))
                    (list '/ (list '+ 3 2) 1)
                    (list '/ 3 (list '+ 2 1))
                    (list '/ (list '- 3 2) 1)
                    (list '/ 3 (list '- 2 1))
                    (list '/ (list '/ 3 2) 1)
                    (list '/ 3 (list '/ 2 1))
                    (list '/ (list '* 3 2) 1)
                    (list '/ 3 (list '* 2 1))
                    (list '* (list '+ 3 2) 1)
                    (list '* 3 (list '+ 2 1))
                    (list '* (list '- 3 2) 1)
                    (list '* 3 (list '- 2 1))
                    (list '* (list '/ 3 2) 1)
                    (list '* 3 (list '/ 2 1))
                    (list '* (list '* 3 2) 1)
                    (list '* 3 (list '* 2 1))))
(check-expect (create-bets '((8 6 4 2)) '((/ + -)))
              (list (list '/ (list '+ (list '- 8 6) 4) 2)
                    (list '/ (list '+ 8 (list '- 6 4)) 2)
                    (list '/ (list '+ 8 6) (list '- 4 2))
                    (list '/ 8 (list '+ (list '- 6 4) 2))
                    (list '/ 8 (list '+ 6 (list '- 4 2)))))
(check-expect (create-bets empty empty) empty)
(check-expect (create-bets (generate-permutations '(3 3 3)) (generate-tuples '(+ - * /) 2))
(list
 (list '+ (list '+ 3 3) 3) (list '+ 3 (list '+ 3 3)) (list '+ (list '- 3 3) 3)
 (list '+ 3 (list '- 3 3)) (list '+ (list '* 3 3) 3) (list '+ 3 (list '* 3 3))
 (list '+ (list '/ 3 3) 3) (list '+ 3 (list '/ 3 3)) (list '- (list '+ 3 3) 3)
 (list '- 3 (list '+ 3 3)) (list '- (list '- 3 3) 3) (list '- 3 (list '- 3 3))
 (list '- (list '* 3 3) 3) (list '- 3 (list '* 3 3)) (list '- (list '/ 3 3) 3)
 (list '- 3 (list '/ 3 3)) (list '* (list '+ 3 3) 3) (list '* 3 (list '+ 3 3))
 (list '* (list '- 3 3) 3) (list '* 3 (list '- 3 3)) (list '* (list '* 3 3) 3)
 (list '* 3 (list '* 3 3)) (list '* (list '/ 3 3) 3) (list '* 3 (list '/ 3 3))
 (list '/ (list '+ 3 3) 3) (list '/ 3 (list '+ 3 3)) (list '/ (list '- 3 3) 3)
 (list '/ 3 (list '- 3 3)) (list '/ (list '* 3 3) 3) (list '/ 3 (list '* 3 3))
 (list '/ (list '/ 3 3) 3) (list '/ 3 (list '/ 3 3)) (list '+ (list '+ 3 3) 3)
 (list '+ 3 (list '+ 3 3)) (list '+ (list '- 3 3) 3) (list '+ 3 (list '- 3 3))
 (list '+ (list '* 3 3) 3) (list '+ 3 (list '* 3 3)) (list '+ (list '/ 3 3) 3)
 (list '+ 3 (list '/ 3 3)) (list '- (list '+ 3 3) 3) (list '- 3 (list '+ 3 3))
 (list '- (list '- 3 3) 3) (list '- 3 (list '- 3 3)) (list '- (list '* 3 3) 3)
 (list '- 3 (list '* 3 3)) (list '- (list '/ 3 3) 3) (list '- 3 (list '/ 3 3))
 (list '* (list '+ 3 3) 3) (list '* 3 (list '+ 3 3)) (list '* (list '- 3 3) 3)
 (list '* 3 (list '- 3 3)) (list '* (list '* 3 3) 3) (list '* 3 (list '* 3 3))
 (list '* (list '/ 3 3) 3) (list '* 3 (list '/ 3 3)) (list '/ (list '+ 3 3) 3)
 (list '/ 3 (list '+ 3 3)) (list '/ (list '- 3 3) 3) (list '/ 3 (list '- 3 3))
 (list '/ (list '* 3 3) 3) (list '/ 3 (list '* 3 3)) (list '/ (list '/ 3 3) 3)
 (list '/ 3 (list '/ 3 3)) (list '+ (list '+ 3 3) 3) (list '+ 3 (list '+ 3 3))
 (list '+ (list '- 3 3) 3) (list '+ 3 (list '- 3 3)) (list '+ (list '* 3 3) 3)
 (list '+ 3 (list '* 3 3)) (list '+ (list '/ 3 3) 3) (list '+ 3 (list '/ 3 3))
 (list '- (list '+ 3 3) 3) (list '- 3 (list '+ 3 3)) (list '- (list '- 3 3) 3)
 (list '- 3 (list '- 3 3)) (list '- (list '* 3 3) 3) (list '- 3 (list '* 3 3))
 (list '- (list '/ 3 3) 3) (list '- 3 (list '/ 3 3)) (list '* (list '+ 3 3) 3)
 (list '* 3 (list '+ 3 3)) (list '* (list '- 3 3) 3) (list '* 3 (list '- 3 3))
 (list '* (list '* 3 3) 3) (list '* 3 (list '* 3 3)) (list '* (list '/ 3 3) 3)
 (list '* 3 (list '/ 3 3)) (list '/ (list '+ 3 3) 3) (list '/ 3 (list '+ 3 3))
 (list '/ (list '- 3 3) 3) (list '/ 3 (list '- 3 3)) (list '/ (list '* 3 3) 3)
 (list '/ 3 (list '* 3 3)) (list '/ (list '/ 3 3) 3) (list '/ 3 (list '/ 3 3))
 (list '+ (list '+ 3 3) 3) (list '+ 3 (list '+ 3 3)) (list '+ (list '- 3 3) 3)
 (list '+ 3 (list '- 3 3)) (list '+ (list '* 3 3) 3) (list '+ 3 (list '* 3 3))
 (list '+ (list '/ 3 3) 3) (list '+ 3 (list '/ 3 3)) (list '- (list '+ 3 3) 3)
 (list '- 3 (list '+ 3 3)) (list '- (list '- 3 3) 3) (list '- 3 (list '- 3 3))
 (list '- (list '* 3 3) 3) (list '- 3 (list '* 3 3)) (list '- (list '/ 3 3) 3)
 (list '- 3 (list '/ 3 3)) (list '* (list '+ 3 3) 3) (list '* 3 (list '+ 3 3))
 (list '* (list '- 3 3) 3) (list '* 3 (list '- 3 3)) (list '* (list '* 3 3) 3)
 (list '* 3 (list '* 3 3)) (list '* (list '/ 3 3) 3) (list '* 3 (list '/ 3 3))
 (list '/ (list '+ 3 3) 3) (list '/ 3 (list '+ 3 3)) (list '/ (list '- 3 3) 3)
 (list '/ 3 (list '- 3 3)) (list '/ (list '* 3 3) 3) (list '/ 3 (list '* 3 3))
 (list '/ (list '/ 3 3) 3) (list '/ 3 (list '/ 3 3)) (list '+ (list '+ 3 3) 3)
 (list '+ 3 (list '+ 3 3)) (list '+ (list '- 3 3) 3) (list '+ 3 (list '- 3 3))
 (list '+ (list '* 3 3) 3) (list '+ 3 (list '* 3 3)) (list '+ (list '/ 3 3) 3)
 (list '+ 3 (list '/ 3 3)) (list '- (list '+ 3 3) 3) (list '- 3 (list '+ 3 3))
 (list '- (list '- 3 3) 3) (list '- 3 (list '- 3 3)) (list '- (list '* 3 3) 3)
 (list '- 3 (list '* 3 3)) (list '- (list '/ 3 3) 3) (list '- 3 (list '/ 3 3))
 (list '* (list '+ 3 3) 3) (list '* 3 (list '+ 3 3)) (list '* (list '- 3 3) 3)
 (list '* 3 (list '- 3 3)) (list '* (list '* 3 3) 3) (list '* 3 (list '* 3 3))
 (list '* (list '/ 3 3) 3) (list '* 3 (list '/ 3 3)) (list '/ (list '+ 3 3) 3)
 (list '/ 3 (list '+ 3 3)) (list '/ (list '- 3 3) 3) (list '/ 3 (list '- 3 3))
 (list '/ (list '* 3 3) 3) (list '/ 3 (list '* 3 3)) (list '/ (list '/ 3 3) 3)
 (list '/ 3 (list '/ 3 3)) (list '+ (list '+ 3 3) 3) (list '+ 3 (list '+ 3 3))
 (list '+ (list '- 3 3) 3) (list '+ 3 (list '- 3 3)) (list '+ (list '* 3 3) 3)
 (list '+ 3 (list '* 3 3)) (list '+ (list '/ 3 3) 3) (list '+ 3 (list '/ 3 3))
 (list '- (list '+ 3 3) 3) (list '- 3 (list '+ 3 3)) (list '- (list '- 3 3) 3)
 (list '- 3 (list '- 3 3)) (list '- (list '* 3 3) 3) (list '- 3 (list '* 3 3))
 (list '- (list '/ 3 3) 3) (list '- 3 (list '/ 3 3)) (list '* (list '+ 3 3) 3)
 (list '* 3 (list '+ 3 3)) (list '* (list '- 3 3) 3) (list '* 3 (list '- 3 3))
 (list '* (list '* 3 3) 3) (list '* 3 (list '* 3 3)) (list '* (list '/ 3 3) 3)
 (list '* 3 (list '/ 3 3)) (list '/ (list '+ 3 3) 3) (list '/ 3 (list '+ 3 3))
 (list '/ (list '- 3 3) 3) (list '/ 3 (list '- 3 3)) (list '/ (list '* 3 3) 3)
 (list '/ 3 (list '* 3 3)) (list '/ (list '/ 3 3) 3) (list '/ 3 (list '/ 3 3))))

;;part v
;;evaluate-bets takes a list of BETs and a target number and produces list of bets
;;   that reaches that number. If any intermediate values are not natural numbers,
;;   that BET is not included in the result.
;;evaluate-bets: (listof BET) Nat -> (listof BET)
;;Examples:
(check-expect (evaluate-bets (create-bets '((1 2) (2 1))
                                          (generate-tuples '(+ - / *) 1)) 3)
              (list (list '+ 1 2) (list '+ 2 1)))
(check-expect (evaluate-bets (create-bets '((1))
                             (generate-tuples '(+ - / *) 0)) 128) empty)

(define (evaluate-bets bets target)
  (local [;;(my-op op val1 val2) takes an operator function, op,
          ;;    and two values, val1 and val2, and evaluates with the operator.
          ;;    If either of val1 or val2 (or both) are false, produce false.
          (define (my-op op val1 val2)
            (cond [(or (false? val1) (false? val2)) false]
                  [else (op val1 val2)]))
          ;;(evaluate bet) takes one BET, bet, and evaluates it.
          (define (evaluate bet)
            (cond [(empty? bet) 0]
                  [(number? bet) bet]
                  [(symbol? (first bet)) (evaluate-sym (first bet)
                                                       (evaluate (second bet)) 
                                                       (evaluate (third bet)))]
                  [(number? (first bet)) (first bet)]))
          ;;(evaluate sym) takes the symbol and performs operation on the
          ;;    rest of BET
          (define (evaluate-sym op left right)
            (cond [(symbol=? op '*) (my-op * left right)]
                  [(symbol=? op '/) (cond [(equal? right 0) false]
                                          [(not (integer? (my-op / left right))) false]
                                          [else (my-op / left right)])]
                  [(symbol=? op '+) (my-op + left right)]
                  [(symbol=? op '-) (cond [(my-op > right left) false]
                                          [else (my-op - left right)])]))]
    (cond [(empty? bets) empty]
          [(false? (evaluate (first bets))) (evaluate-bets (rest bets) target)]
          [(= (evaluate (first bets)) target) (cons (first bets) (evaluate-bets (rest bets) target))]
          [else (evaluate-bets (rest bets) target)])))

;;Tests:
(check-expect (evaluate-bets (create-bets '((5 6 7 8)) '((+ - *))) 368) empty)
(check-expect (evaluate-bets (create-bets (generate-permutations '(5 6 7))
                                          (generate-tuples '(+ - * /) 2)) 100) empty)
(check-expect (evaluate-bets (create-bets (generate-permutations '(7 8 9))
                                          (generate-tuples '(+ - * /) 2)) 128)
              (list (list '* (list '+ 7 9) 8)
                    (list '* 8 (list '+ 7 9))
                    (list '* 8 (list '+ 9 7))
                    (list '* (list '+ 9 7) 8)))
(check-expect (evaluate-bets (create-bets (generate-permutations '(2 4 8))
                                          (generate-tuples '(+ - *) 2)) 2)
              '((- (- 8 4) 2)
                (- (- 8 2) 4)
                (- 8 (+ 4 2))
                (- 8 (+ 2 4))))
(check-expect (evaluate-bets '((/ (/ (- 8 4) 0) 1)) 1) empty)
(check-expect (evaluate-bets '(15) 15) '(15))
(check-expect (evaluate-bets
               (create-bets (generate-permutations '(0 5))
                            (generate-tuples '(+ - * /) 1)) 0) empty)
(check-expect (evaluate-bets '((- 1 3)) 2) empty)
(check-expect (evaluate-bets empty 2) empty)
(check-expect (length (evaluate-bets (create-bets
                                      (generate-permutations '(1 5 7 10 25))
                                      (generate-tuples '(+ - * /) 4)) 175)) 282)  

;;part vi
;;(countdown-numbers lon target) produces a BET using the numbers in lon
;;    that evaluates to target, or false if no such BET exists.
;;countdown-numbers: (listof Nat) Nat -> (anyof false BET)
;;Examples:
(check-expect (countdown-numbers '(5 6 7 8 9) 247)
              (list '- (list '* 5 (list '+ (list '* 6 7) 9)) 8))
(check-expect (countdown-numbers '(3 3 3 3) 100) false)


(define (countdown-numbers lon target)
  (local [(define (generate-valid-bets lon target)
            (evaluate-bets (create-bets (generate-permutations lon)
                                        (generate-tuples '(+ - * /) (sub1 (length lon))))
                           target))]
    (cond [(empty? (generate-valid-bets lon target)) false]
          [else (first (generate-valid-bets lon target))])))

;;Tests:
(check-expect (countdown-numbers '(5 6 7 8 9) 247)
              (list '- (list '* 5 (list '+ (list '* 6 7) 9)) 8))
(check-expect (countdown-numbers '(1 2 3 4) 100) false)
(check-expect (countdown-numbers '(7 8 9) 128) (list '* (list '+ 7 9) 8))
(check-expect (countdown-numbers '(2 4 8) 2) '(- (- 8 4) 2))
(check-expect (countdown-numbers '(1 2 3) 100) false)
(check-expect (countdown-numbers '(8 6 4 2) 5) (list '+ (list '/ (list '+ 2 6) 8) 4))
(check-expect (countdown-numbers '() 2) false)
(check-expect (countdown-numbers '(1) 3) false)
(check-expect (countdown-numbers '(3) 3) false)
(check-expect (countdown-numbers '(1 2) 3) (list '+ 1 2))
(check-expect (countdown-numbers '(1 2) 10) false)
(check-expect (countdown-numbers '(10 6 4) 0) (list '- (list '+ 4 6) 10)) 

                                          